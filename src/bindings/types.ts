// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

/**
 * Application-wide settings.
 */
export type AppSettings = { 
/**
 * The application theme.
 */
theme: Theme, 
/**
 * Canvas interaction mode.
 */
canvasImode: CanvasImode, 
/**
 * The keyboard shortcuts.
 */
shortcuts: Shortcuts, };

/**
 * An update to [`AppSettings`].
 */
export type AppSettingsUpdate = { 
/**
 * An update to [`AppSettings::theme`].
 */
theme?: Theme, 
/**
 * An update to [`AppSettings::canvas_imode`].
 */
canvasImode?: CanvasImode, 
/**
 * An update to [`AppSettings::shortcuts`].
 */
shortcuts?: ShortcutsUpdate, };

/**
 * Canvas interaction mode.
 */
export type CanvasImode = "SINK" | "FLOAT";

/**
 * Deskulpt window enum.
 */
export type DeskulptWindow = "manager" | "canvas";

/**
 * Event for exiting the application.
 *
 * This event is emitted from the backend to the manager window when the
 * application needs to be closed for it to persist the states before exiting.
 */
export type ExitAppEvent = null;

/**
 * Event for removing widgets.
 *
 * This event is emitted from the manager window to the canvas window when
 * widgets need to be removed.
 */
export type RemoveWidgetsEvent = Array<string>;

/**
 * Event for re-rendering widgets.
 *
 * This event is mainly emitted from the manager window to the canvas window
 * when settings or code of a widget needs to be re-rendered. It may also be
 * emitted from the backend to the canvas window for the initial render.
 */
export type RenderWidgetsEvent = Array<RenderWidgetsEventInner>;

/**
 * Inner structure for [`RenderWidgetsEvent`].
 */
export type RenderWidgetsEventInner = { 
/**
 * The ID of the widget being re-rendered.
 */
id: string, 
/**
 * If provided, update the settings of the widget.
 */
settings?: WidgetSettings, 
/**
 * If provided, update the code of the widget.
 */
code?: string, };

/**
 * Full settings of the application.
 */
export type Settings = { 
/**
 * Application-wide settings.
 */
app: AppSettings, 
/**
 * The mapping from widget IDs to their respective settings.
 */
widgets: Record<string, WidgetSettings>, };

/**
 * An update to [`Settings`].
 */
export type SettingsUpdate = { 
/**
 * An update to [`Settings::app`].
 */
app?: AppSettingsUpdate, 
/**
 * An update to [`Settings::widgets`] by widget ID.
 */
widgets?: Record<string, WidgetSettingsUpdate>, };

/**
 * Keyboard shortcuts registered in the application.
 *
 * A keyboard shortcut being `None` means that it is disabled, otherwise it is
 * a string parsable into [`Shortcut`](tauri_plugin_global_shortcut::Shortcut).
 */
export type Shortcuts = { 
/**
 * For toggling canvas interaction mode.
 */
toggleCanvasImode: string | null, 
/**
 * For opening the manager window.
 */
openManager: string | null, };

/**
 * An update to [`Shortcuts`].
 */
export type ShortcutsUpdate = { 
/**
 * An update to [`Shortcuts::toggle_canvas_imode`].
 */
toggleCanvasImode?: string | null, 
/**
 * An update to [`Shortcuts::open_manager`].
 */
openManager?: string | null, };

/**
 * Event for showing a toast notification.
 *
 * This event is emitted from the backend to the canvas window when a toast
 * notification needs to be displayed.
 */
export type ShowToastEvent = { "type": "SUCCESS", "content": string } | { "type": "ERROR", "content": string };

/**
 * Event for switching the app theme.
 *
 * This event is emitted from the manager window to the canvas window when the
 * theme is switched from the manager side.
 */
export type SwitchThemeEvent = Theme;

/**
 * Light/dark theme of the application.
 */
export type Theme = "light" | "dark";

/**
 * Event for updating settings of a widget.
 *
 * This event is emitted from the backend to both the manager and canvas
 * windows when any setting is updated.
 */
export type UpdateSettingsEvent = Settings;

/**
 * Full configuration of a Deskulpt widget.
 */
export type WidgetConfig = { "type": "VALID", "content": { 
/**
 * The directory name of the widget.
 */
dir: string, 
/**
 * Display name of the widget.
 */
name: string, 
/**
 * Entry file of the widget source code.
 */
entry: string, 
/**
 * External dependencies of the widget as in `package.json`.
 */
dependencies: Record<string, string>, } } | { "type": "INVALID", "content": { 
/**
 * The directory name of the widget.
 */
dir: string, 
/**
 * Error message.
 */
error: string, } };

/**
 * Per-widget settings.
 *
 * Different from widget configurations, these are independent of the widget
 * configuration files and are managed internally by the application.
 */
export type WidgetSettings = { 
/**
 * The leftmost x-coordinate in pixels.
 */
x: number, 
/**
 * The topmost y-coordinate in pixels.
 */
y: number, 
/**
 * The opacity in percentage.
 */
opacity: number, };

/**
 * An update to [`WidgetSettings`].
 */
export type WidgetSettingsUpdate = { 
/**
 * An update to [`WidgetSettings::x`].
 */
x?: number, 
/**
 * An update to [`WidgetSettings::y`].
 */
y?: number, 
/**
 * An update to [`WidgetSettings::opacity`].
 */
opacity?: number, };
