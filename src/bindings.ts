/*! Auto-generated by deskulpt-specta. DO NOT EDIT! */

import { invoke } from "@tauri-apps/api/core";
import * as tauriEvent from "@tauri-apps/api/event";

// =============================================================================
// Types
// =============================================================================

/**
 * Application-wide settings.
 */
export type AppSettings = { 
/**
 * The application theme.
 */
theme: Theme; 
/**
 * The keyboard shortcuts.
 */
shortcuts: Partial<{ [key in ShortcutKey]: string }> }

export type BundleWidgetsKind = { type: "all" } | { type: "single"; content: string }

/**
 * Deskulpt window enum.
 */
export type DeskulptWindow = 
/**
 * The manager window.
 */
"manager" | 
/**
 * The canvas window.
 */
"canvas"

export type JsonValue = null | boolean | number | string | JsonValue[] | { [key in string]: JsonValue }

/**
 * TODO(Charlie-XIAO)
 */
export type RenderWidgetsEvent = 
/**
 * The mapping from widget IDs to their respective bundled code.
 */
{ [key in string]: string }

/**
 * Full settings of the Deskulpt application.
 */
export type Settings = { 
/**
 * Application-wide settings.
 */
app: AppSettings; 
/**
 * The mapping from widget IDs to their respective settings.
 */
widgets: { [key in string]: WidgetSettings } }

/**
 * Message for updating settings.
 */
export type SettingsUpdate = 
/**
 * Update the theme.
 */
{ theme: Theme } | 
/**
 * Update a keyboard shortcut.
 * 
 * The first element is the shortcut key, and the second element is the new
 * shortcut value. `None` means to remove the shortcut.
 */
{ shortcut: [ShortcutKey, string | null] } | 
/**
 * Update the settings of a widget.
 * 
 * The first element is the widget ID, and the second element is the new
 * widget settings. If the widget ID does not exist, this is an error.
 */
{ widget: [string, WidgetSettingsUpdate] }

/**
 * An application setup task.
 */
export type SetupTask = 
/**
 * Whether the canvas window is ready to listen to
 * [`UpdateSettingsEvent`](crate::events::UpdateSettingsEvent).
 */
"canvasUpdateSettings" | 
/**
 * Whether the canvas window is ready to listen to
 * [`RenderWidgetsEvent`](crate::events::RenderWidgetsEvent).
 */
"canvasRenderWidgets" | 
/**
 * Whether the canvas window is ready to listen to
 * [`ShowToastEvent`](crate::events::ShowToastEvent).
 */
"canvasShowToast" | 
/**
 * Whether the manager window is ready to listen to
 * [`UpdateSettingsEvent`](crate::events::UpdateSettingsEvent).
 */
"managerUpdateSettings" | 
/**
 * Whether the manager window is ready to listen to
 * [`UpdateWidgetConfigRegistryEvent`](crate::events::UpdateWidgetConfigRegistryEvent).
 */
"managerUpdateWidgetConfigRegistry"

/**
 * Types of keyboard shortcuts in the application.
 */
export type ShortcutKey = 
/**
 * For toggling canvas interaction mode.
 */
"toggleCanvasImode" | 
/**
 * For opening the manager window.
 */
"openManager"

/**
 * Event for showing a toast notification.
 * 
 * This event is emitted from the backend to the canvas window when a toast
 * notification needs to be displayed.
 */
export type ShowToastEvent = 
/**
 * Show a [success](https://sonner.emilkowal.ski/toast#success) toast.
 */
{ type: "success"; content: string } | 
/**
 * Show an [error](https://sonner.emilkowal.ski/toast#error) toast.
 */
{ type: "error"; content: string }

/**
 * Light/dark theme of the application.
 */
export type Theme = "light" | "dark"

/**
 * Event for updating the settings.
 * 
 * This event is emitted from the backend to all windows when the settings are
 * updated.
 */
export type UpdateSettingsEvent = 
/**
 * The updated settings.
 */
Settings

/**
 * Event for updating the widget configuration registry.
 * 
 * This event is emitted from the backend to the manager window when the
 * widget configuration registry is updated.
 */
export type UpdateWidgetConfigRegistryEvent = 
/**
 * The updated widget configuration registry.
 */
WidgetConfigRegistry

export type WidgetConfig = { type: "ok"; name: string; entry: string; dependencies: { [key in string]: string } } | { type: "err"; error: string }

export type WidgetConfigRegistry = { [key in string]: WidgetConfig }

/**
 * Per-widget settings.
 * 
 * Different from widget configurations, these are independent of the widget
 * configuration files and are managed internally by the application.
 */
export type WidgetSettings = { 
/**
 * The leftmost x-coordinate in pixels.
 */
x: number; 
/**
 * The topmost y-coordinate in pixels.
 */
y: number; 
/**
 * The opacity in percentage.
 */
opacity: number }

/**
 * Message for updating widget settings.
 */
export type WidgetSettingsUpdate = { 
/**
 * [`WidgetSettings::x`](crate::settings::WidgetSettings::x)
 */
x?: number; 
/**
 * [`WidgetSettings::y`](crate::settings::WidgetSettings::y)
 */
y?: number; 
/**
 * [`WidgetSettings::opacity`](crate::settings::WidgetSettings::opacity)
 */
opacity?: number }

// =============================================================================
// Events
// =============================================================================

function makeEvent<T>(name: string) {
  return {
    /** Listen for the event. */
    listen: (cb: tauriEvent.EventCallback<T>, options?: tauriEvent.Options) =>
      tauriEvent.listen(name, cb, options),
    /** Listen once for the event. */
    once: (cb: tauriEvent.EventCallback<T>, options?: tauriEvent.Options) =>
      tauriEvent.once(name, cb, options),
    /** Emit the event to all targets. */
    emit: (payload: T) => tauriEvent.emit(name, payload),
    /** Emit the event to a specific Deskulpt window. */
    emitTo: (window: DeskulptWindow, payload: T) =>
      tauriEvent.emitTo(window, name, payload),
  };
}

export const events = {
  renderWidgetsEvent: makeEvent<RenderWidgetsEvent>("render-widgets-event"),
  showToastEvent: makeEvent<ShowToastEvent>("show-toast-event"),
  updateSettingsEvent: makeEvent<UpdateSettingsEvent>("update-settings-event"),
  updateWidgetConfigRegistryEvent: makeEvent<UpdateWidgetConfigRegistryEvent>("update-widget-config-registry-event"),
};

// =============================================================================
// Commands
// =============================================================================

export const commands = {
  /**
   * TODO(Charlie-XIAO)
   */
  bundleWidgets: (payload: {
    kind: BundleWidgetsKind,
  }) => invoke<null>("bundle_widgets", payload),

  /**
   * Call a plugin command (ðŸš§ TODO ðŸš§).
   * 
   * ### ðŸš§ TODO ðŸš§
   * 
   * The Deskulpt core should keep a state of the registered plugins and call the
   * plugins dynamically. Also, instead of invoking the plugins directly, the
   * Deskulpt core should not depend on any of the plugins and should use IPC to
   * communicate with the plugins.
   * 
   * Also, in order to simplify the engine API for the plugin (because it is
   * a temporary implementation), `app_handle` is using the default runtime but
   * it should be a generic `R: Runtime` parameter in the final implementation.
   */
  callPlugin: (payload: {
    plugin: string,
    command: string,
    id: string,
    payload: JsonValue | null,
  }) => invoke<JsonValue>("call_plugin", payload),

  /**
   * Rescan the widgets directory.
   * 
   * This command scans the widgets directory for available widgets, loads them,
   * and updates the application's widgets state accordingly. An
   * [`UpdateWidgetsEvent`](crate::events::UpdateWidgetsEvent) is emitted to
   * notify all windows of this update.
   * 
   * ### Errors
   * 
   * - Failed to access the widgets directory.
   * - Error traversing the widgets directory.
   * - Error inferring widget ID from the directory entry.
   * - Failed to emit the event.
   */
  loadWidgets: () => invoke<null>("load_widgets"),

  /**
   * Open the widgets directory or a specific widget directory.
   * 
   * If the widget ID is provided, a specific widget directory will be opened.
   * Otherwise, the widgets directory will be opened.
   * 
   * ### Errors
   * 
   * - Widget ID is provided but does not exist in the collection.
   * - Failed to access the widgets directory.
   * - Error opening the directory.
   */
  openWidget: (payload: {
    id: string | null,
  }) => invoke<null>("open_widget", payload),

  /**
   * Update the settings.
   * 
   * This command updates the settings state in the backend. If an update has
   * side effects, they will be applied prior to the update being committed. See
   * [`SettingsStateExt`] for more information.
   * 
   * ### Errors
   * 
   * - Failed to apply the side effects, if any.
   */
  updateSettings: (payload: {
    update: SettingsUpdate,
  }) => invoke<null>("update_settings", payload),

  /**
   * TODO(Charlie-XIAO)
   */
  markSetup: (payload: {
    task: SetupTask,
  }) => invoke<null>("mark_setup", payload),
};
