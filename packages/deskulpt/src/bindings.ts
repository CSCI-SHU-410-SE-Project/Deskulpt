/*! Auto-generated by xtask-gen. DO NOT EDIT! */

import { invoke } from "@tauri-apps/api/core";
import * as tauriEvent from "@tauri-apps/api/event";

// =============================================================================
// Types
// =============================================================================

/**
 * Deskulpt window enum.
 */
export type DeskulptWindow = 
/**
 * The manager window.
 */
"manager" | 
/**
 * The canvas window.
 */
"canvas"

export type JsonValue = null | boolean | number | string | JsonValue[] | { [key in string]: JsonValue }

/**
 * Event for removing widgets.
 * 
 * This event is emitted from the manager window to the canvas window when
 * widgets need to be removed.
 */
export type RemoveWidgetsEvent = 
/**
 * The list of widget IDs to be removed.
 */
string[]

/**
 * Event for re-rendering widgets.
 * 
 * This event is mainly emitted from the manager window to the canvas window
 * when settings or code of a widget needs to be re-rendered. It may also be
 * emitted from the backend to the canvas window for the initial render.
 */
export type RenderWidgetsEvent = 
/**
 * The list of widget IDs to be re-rendered.
 */
string[]

/**
 * Full settings of the Deskulpt application.
 */
export type Settings = { 
/**
 * The application theme.
 */
theme: Theme; 
/**
 * The keyboard shortcuts.
 */
shortcuts: Partial<{ [key in ShortcutKey]: string }>; 
/**
 * The mapping from widget IDs to their respective settings.
 */
widgets: { [key in string]: WidgetSettings } }

/**
 * A patch for partial updates to [`Settings`].
 */
export type SettingsPatch = { 
/**
 * If not `None`, update [`Settings::theme`].
 */
theme?: Theme; 
/**
 * If not `None`, update [`Settings::shortcuts`].
 * 
 * Non-specified shortcuts will remain unchanged. If a shortcut value is
 * `None`, it means removing that shortcut. Otherwise, it means updating
 * or adding that shortcut.
 */
shortcuts?: Partial<{ [key in ShortcutKey]: string | null }>; 
/**
 * If not `None`, update [`Settings::widgets`].
 * 
 * Non-specified widgets will remain unchanged. If a widget settings patch
 * is `None`, it means leaving that widget settings unchanged. Otherwise,
 * it means applying the patch to that widget settings. If the widget ID
 * does not exist, a new widget settings will be created with default
 * values, and then the patch will be applied to it.
 */
widgets?: { [key in string]: WidgetSettingsPatch | null } }

/**
 * Types of keyboard shortcuts in the application.
 */
export type ShortcutKey = 
/**
 * For toggling canvas interaction mode.
 */
"toggleCanvasImode" | 
/**
 * For opening the manager window.
 */
"openManager"

/**
 * Event for showing a toast notification.
 * 
 * This event is emitted from the backend to the canvas window when a toast
 * notification needs to be displayed.
 */
export type ShowToastEvent = 
/**
 * Show a [success](https://sonner.emilkowal.ski/toast#success) toast.
 */
{ type: "success"; content: string } | 
/**
 * Show an [error](https://sonner.emilkowal.ski/toast#error) toast.
 */
{ type: "error"; content: string }

/**
 * Light/dark theme of the application.
 */
export type Theme = "light" | "dark"

/**
 * Event for updating settings of a widget.
 * 
 * This event is emitted between the manager window and the canvas window to
 * each other when widget settings are updated on one side.
 */
export type UpdateSettingsEvent = Settings

/**
 * Full configuration of a Deskulpt widget.
 */
export type WidgetConfig = 
/**
 * Valid configuration of a widget.
 */
{ type: "ok"; name: string; entry: string; dependencies: { [key in string]: string } } | 
/**
 * Error information if a widget failed to load.
 */
{ type: "err"; error: string }

/**
 * Per-widget settings.
 * 
 * Different from widget configurations, these are independent of the widget
 * configuration files and are managed internally by the application.
 */
export type WidgetSettings = { 
/**
 * The leftmost x-coordinate in pixels.
 */
x: number; 
/**
 * The topmost y-coordinate in pixels.
 */
y: number; 
/**
 * The width in pixels.
 */
width: number; 
/**
 * The height in pixels.
 */
height: number; 
/**
 * The opacity in percentage.
 */
opacity: number }

/**
 * A patch for partial updates to [`WidgetSettings`].
 */
export type WidgetSettingsPatch = { 
/**
 * If not `None`, update [`WidgetSettings::x`].
 */
x?: number; 
/**
 * If not `None`, update [`WidgetSettings::y`].
 */
y?: number; 
/**
 * If not `None`, update [`WidgetSettings::width`].
 */
width?: number; 
/**
 * If not `None`, update [`WidgetSettings::height`].
 */
height?: number; 
/**
 * If not `None`, update [`WidgetSettings::opacity`].
 */
opacity?: number }

// =============================================================================
// Events
// =============================================================================

function makeEvent<T>(name: string) {
  return {
    /** Listen for the event. */
    listen: (cb: tauriEvent.EventCallback<T>, options?: tauriEvent.Options) =>
      tauriEvent.listen(name, cb, options),
    /** Listen once for the event. */
    once: (cb: tauriEvent.EventCallback<T>, options?: tauriEvent.Options) =>
      tauriEvent.once(name, cb, options),
    /** Emit the event to all targets. */
    emit: (payload: T) => tauriEvent.emit(name, payload),
    /** Emit the event to a specific Deskulpt window. */
    emitTo: (window: DeskulptWindow, payload: T) =>
      tauriEvent.emitTo(window, name, payload),
  };
}

export const events = {
  removeWidgets: makeEvent<RemoveWidgetsEvent>("remove-widgets"),
  renderWidgets: makeEvent<RenderWidgetsEvent>("render-widgets"),
  showToast: makeEvent<ShowToastEvent>("show-toast"),
  updateSettings: makeEvent<UpdateSettingsEvent>("update-settings"),
};

// =============================================================================
// Commands
// =============================================================================

export const commands = {
  core: {
    /**
     * Bundle a widget.
     * 
     * ### Errors
     * 
     * - Failed to access the widgets directory.
     * - Widget ID does not exist in the configuration map.
     * - Widget has a configuration error.
     * - Error bundling the widget.
     */
    bundleWidget: (
      id: string,
    ) => invoke<string>("plugin:deskulpt-core|bundle_widget", {
      id,
    }),

    /**
     * Call a plugin command (ðŸš§ TODO ðŸš§).
     * 
     * ### ðŸš§ TODO ðŸš§
     * 
     * The Deskulpt core should keep a state of the registered plugins and call the
     * plugins dynamically. Also, instead of invoking the plugins directly, the
     * Deskulpt core should not depend on any of the plugins and should use IPC to
     * communicate with the plugins.
     * 
     * Also, in order to simplify the engine API for the plugin (because it is
     * a temporary implementation), `app_handle` is using the default runtime but
     * it should be a generic `R: Runtime` parameter in the final implementation.
     */
    callPlugin: (
      plugin: string,
      command: string,
      id: string,
      payload: JsonValue | null,
    ) => invoke<JsonValue>("plugin:deskulpt-core|call_plugin", {
      plugin,
      command,
      id,
      payload,
    }),


    createWidgetWebview: (
      id: string,
      x: number,
      y: number,
      width: number,
      height: number,
    ) => invoke<null>("plugin:deskulpt-core|create_widget_webview", {
      id,
      x,
      y,
      width,
      height,
    }),

    /**
     * Wrapper of
     * [`emit_on_render_ready`](InitialRenderStateExt::emit_on_render_ready).
     * 
     * ### Errors
     * 
     * - Failed to emit the [`RenderWidgetsEvent`] to the canvas.
     */
    emitOnRenderReady: (
      event: RenderWidgetsEvent,
    ) => invoke<null>("plugin:deskulpt-core|emit_on_render_ready", {
      event,
    }),

    /**
     * Exit the application with cleanup.
     * 
     * This command never returns an error; in other words it will always exit the
     * application in the end. Prior to exiting, it will try to dump the settings
     * for persistence, but failure to do so will not prevent exiting.
     */
    exitApp: (
      settings: Settings,
    ) => invoke<void>("plugin:deskulpt-core|exit_app", {
      settings,
    }),

    /**
     * Open the widgets directory or a specific widget directory.
     * 
     * If the widget ID is provided, a specific widget directory will be opened.
     * Otherwise, the widgets directory will be opened.
     * 
     * ### Errors
     * 
     * - Widget ID is provided but does not exist in the collection.
     * - Failed to access the widgets directory.
     * - Error opening the directory.
     */
    openWidget: (
      id: string | null,
    ) => invoke<null>("plugin:deskulpt-core|open_widget", {
      id,
    }),

    /**
     * Rescan the widgets directory and update the widget configuration map.
     * 
     * This will update the widget configuration map state and return the updated
     * configuration map as well.
     * 
     * ### Errors
     * 
     * - Failed to access the widgets directory.
     * - Error traversing the widgets directory.
     * - Error inferring widget ID from the directory entry.
     */
    rescanWidgets: () => invoke<{ [key in string]: WidgetConfig }>("plugin:deskulpt-core|rescan_widgets"),

    /**
     * Wrapper of [`set_render_ready`](InitialRenderStateExt::set_render_ready).
     * 
     * ### Errors
     * 
     * - Failed to emit the
     * [`RenderWidgetsEvent`](crate::events::RenderWidgetsEvent) to the canvas.
     */
    setRenderReady: () => invoke<null>("plugin:deskulpt-core|set_render_ready"),

    /**
     * Update the settings.
     * 
     * This command updates the settings state in the backend. If an update has
     * side effects, they will be applied prior to the update being committed. See
     * [`SettingsStateExt`] for more information.
     * 
     * ### Errors
     * 
     * - Failed to apply the side effects, if any.
     */
    updateSettings: (
      patch: SettingsPatch,
    ) => invoke<null>("plugin:deskulpt-core|update_settings", {
      patch,
    }),
  },
};
