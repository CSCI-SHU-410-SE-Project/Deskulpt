#![doc = include_str!("../README.md")]
#![doc(
    html_logo_url = "https://github.com/CSCI-SHU-410-SE-Project/Deskulpt/raw/main/src/public/deskulpt.svg",
    html_favicon_url = "https://github.com/CSCI-SHU-410-SE-Project/Deskulpt/raw/main/src/public/deskulpt.svg"
)]

use proc_macro::TokenStream;

mod events;

/// Derive the
/// [`DeskulptEvent`](../deskulpt_core/events/trait.DeskulptEvent.html) trait
/// for a struct.
///
/// The event name is automatically generated by stripping off the "Event"
/// suffix (if present) and converting the remaining name to kebab-case. For
/// instance, `MyCustomEvent` will have the name `"my-custom"`. This behavior
/// can be overridden with `#[deskulpt_event(name = "custom-name")]`.
#[proc_macro_derive(DeskulptEvent, attributes(deskulpt_event))]
pub fn derive_deskulpt_event(input: TokenStream) -> TokenStream {
    events::proc_derive_deskulpt_event(input)
}

/// Register Deskulpt events for automatic TypeScript binding generation.
///
/// This macro generates a test function named `export_bindings_deskulpt_events`
/// that exports TypeScript bindings for the registered Deskulpt event types.
/// The bindings will be exported to `events.ts` under the same directory as the
/// bindings generated by ts-rs.
///
/// ### Usage
///
/// ```ignore
/// #[derive(DeskulptEvent, ts_rs::TS)]
/// #[ts(export, export_to = "types.ts")]
/// struct MyFirstEvent;
///
/// #[derive(DeskulptEvent, ts_rs::TS)]
/// #[ts(export, export_to = "types.ts")]
/// struct MySecondEvent;
///
/// register_deskulpt_events![MyFirstEvent, MySecondEvent];
/// ```
#[proc_macro]
pub fn register_deskulpt_events(input: TokenStream) -> TokenStream {
    events::proc_register_deskulpt_events(input)
}
